"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SpinnerMaterial =
/*#__PURE__*/
function (_HTMLElement) {
  _inherits(SpinnerMaterial, _HTMLElement);

  function SpinnerMaterial() {
    var _this;

    _classCallCheck(this, SpinnerMaterial);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpinnerMaterial).call(this)); // get config from attributes

    var stroke = _this.getAttribute('stroke') || 5;
    var radius = _this.getAttribute('radius') || 40;
    var color = _this.getAttribute('color') || '#333333';
    var visible = _this.getAttribute('visible') || 'true'; // create shadow dom root

    _this._root = _this.attachShadow({
      mode: 'open'
    });
    _this._root.innerHTML = "\n      <style>\n        @keyframes rsm-rotate {\n          from {\n            transform: rotate(0deg);\n          }\n          to {\n            transform: rotate(360deg);\n          }\n        }\n        \n        @-webkit-keyframes rsm-rotate {\n          from {\n            -webkit-transform: rotate(0deg);\n          }\n          to {\n            -webkit-transform: rotate(360deg);\n          }\n        }\n        \n        @keyframes rsm-sweep {\n          0% {\n            -webkit-clip-path: polygon(0% 0%, 0% 0%, 0% 0%, 50% 50%, 0% 0%, 0% 0%, 0% 0%);\n            clip-path: polygon(0% 0%, 0% 0%, 0% 0%, 50% 50%, 0% 0%, 0% 0%, 0% 0%);\n          }\n          50% {\n            -webkit-clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 50% 50%, 100% 0%, 100% 0%, 0% 0%);\n            clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 50% 50%, 100% 0%, 100% 0%, 0% 0%);\n          }\n          100% {\n            -webkit-clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 50% 50%, 100% 100%, 100% 0%, 0% 0%);\n            clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 50% 50%, 100% 100%, 100% 0%, 0% 0%);\n          }\n        }\n        \n        @-webkit-keyframes rsm-sweep {\n          0% {\n            -webkit-clip-path: polygon(0% 0%, 0% 0%, 0% 0%, 50% 50%, 0% 0%, 0% 0%, 0% 0%);\n          }\n          50% {\n            -webkit-clip-path: polygon(0% 0%, 0% 100%, 0% 100%, 50% 50%, 100% 0%, 100% 0%, 0% 0%);\n          }\n          100% {\n            -webkit-clip-path: polygon(0% 0%, 0% 100%, 100% 100%, 50% 50%, 100% 100%, 100% 0%, 0% 0%);\n          }\n        }\n      </style>\n      <div\n        style=\"\n          border-radius: 50%;\n          border: 10px solid #333;\n          box-sizing: border-box;\n          -webkit-animation: rsm-sweep 1s linear alternate infinite, rsm-rotate 0.8s linear infinite;\n                  animation: rsm-sweep 1s linear alternate infinite, rsm-rotate 0.8s linear infinite;\n          width: ".concat(radius * 2, "; \n          height: ").concat(radius * 2, "; \n          border-color: ").concat(color, "; \n          border-width: ").concat(stroke, ";\n          display: ").concat(visible === 'true' ? 'block' : 'none', ";\n        \"/>\n    ");
    return _this;
  }

  _createClass(SpinnerMaterial, [{
    key: "setBorderWidth",
    value: function setBorderWidth(newValue) {
      var div = this._root.querySelector('div');

      div.style.borderWidth = Math.max(0, newValue) + 'px';
    }
  }, {
    key: "setRadius",
    value: function setRadius(newValue) {
      var div = this._root.querySelector('div');

      div.style.width = Math.max(0, newValue) + 'px';
      div.style.height = Math.max(0, newValue) + 'px';
    }
  }, {
    key: "setColor",
    value: function setColor(newValue) {
      var div = this._root.querySelector('div');

      div.style.borderColor = newValue;
    }
  }, {
    key: "setDisplay",
    value: function setDisplay(newValue) {
      var div = this._root.querySelector('div');

      div.style.display = newValue == 'true' ? 'block' : 'none';
    }
  }, {
    key: "attributeChangedCallback",
    value: function attributeChangedCallback(name, oldValue, newValue) {
      if (name === 'stroke') {
        this.setBorderWidth(newValue);
      }

      if (name === 'radius') {
        this.setRadius(newValue);
      }

      if (name === 'color') {
        this.setColor(newValue);
      }

      if (name === 'visible') {
        this.setDisplay(newValue);
      }
    }
  }], [{
    key: "observedAttributes",
    get: function get() {
      return ['stroke', 'radius', 'visible', 'color'];
    }
  }]);

  return SpinnerMaterial;
}(_wrapNativeSuper(HTMLElement)); // make sure we didn't alread register


if (!(document.createElement('spinner-material') instanceof SpinnerMaterial)) {
  window.customElements.define('spinner-material', SpinnerMaterial);
}